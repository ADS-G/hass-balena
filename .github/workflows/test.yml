name: Test

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main, develop]
  schedule:
    # Run tests daily at 2 AM UTC
    - cron: "0 2 * * *"
  workflow_dispatch:

jobs:
  test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ["3.11", "3.12"]
        home-assistant-version: ["2023.1.0", "2024.1.0", "latest"]

    name: Test Python ${{ matrix.python-version }} with HA ${{ matrix.home-assistant-version }}

    steps:
      - name: 🏗️ Checkout repository
        uses: actions/checkout@v4

      - name: 🐍 Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}
          cache: "pip"

      - name: 📦 Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r tests/requirements.txt
          pip install 'balena-sdk>=15.0.0'

          # Install specific Home Assistant version
          if [ "${{ matrix.home-assistant-version }}" = "latest" ]; then
            pip install homeassistant
          else
            pip install homeassistant==${{ matrix.home-assistant-version }}
          fi

      - name: 🧪 Run comprehensive test suite
        run: |
          cd tests
          python test_runner.py
        env:
          PYTHONPATH: ${{ github.workspace }}

      - name: 📊 Generate test report
        if: always()
        run: |
          cd tests
          echo "## Test Results for Python ${{ matrix.python-version }} + HA ${{ matrix.home-assistant-version }}" >> test_report.md
          echo "" >> test_report.md
          echo "- **Status**: $(if [ $? -eq 0 ]; then echo '✅ PASSED'; else echo '❌ FAILED'; fi)" >> test_report.md
          echo "- **Python Version**: ${{ matrix.python-version }}" >> test_report.md
          echo "- **Home Assistant Version**: ${{ matrix.home-assistant-version }}" >> test_report.md
          echo "- **Test Run**: $(date -u)" >> test_report.md

      - name: 📤 Upload test artifacts
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: test-results-py${{ matrix.python-version }}-ha${{ matrix.home-assistant-version }}
          path: |
            tests/test_report.md
            tests/*.log

  security-scan:
    runs-on: ubuntu-latest
    name: Security Scan
    steps:
      - name: 🏗️ Checkout repository
        uses: actions/checkout@v4

      - name: 🔍 Run Bandit security scan
        uses: tj-actions/bandit@v5.5
        with:
          options: "-r custom_components/ -f json -o bandit-report.json"

      - name: 📊 Upload security scan results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: security-scan-results
          path: bandit-report.json

  integration-validation:
    runs-on: ubuntu-latest
    name: Integration Validation
    steps:
      - name: 🏗️ Checkout repository
        uses: actions/checkout@v4

      - name: 🐍 Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.11"

      - name: 📦 Install Home Assistant and dependencies
        run: |
          python -m pip install --upgrade pip
          pip install homeassistant
          pip install 'balena-sdk>=15.0.0'

      - name: 🔍 Test integration loading
        run: |
          python -c "
          import sys
          sys.path.insert(0, 'custom_components')

          # Test imports
          from balena_cloud import async_setup_entry, async_unload_entry
          from balena_cloud.api import BalenaCloudAPIClient
          from balena_cloud.coordinator import BalenaCloudDataUpdateCoordinator
          from balena_cloud.config_flow import BalenaCloudConfigFlow

          print('✅ All integration components imported successfully')

          # Test basic functionality
          api_client = BalenaCloudAPIClient('test_token')
          print('✅ API client creation successful')

          print('🎉 Integration validation passed!')
          "

  test-summary:
    if: always()
    needs: [test, security-scan, integration-validation]
    runs-on: ubuntu-latest
    name: Test Summary
    steps:
      - name: 📊 Check test results
        run: |
          echo "## 🧪 Test Suite Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "| Component | Status |" >> $GITHUB_STEP_SUMMARY
          echo "|-----------|--------|" >> $GITHUB_STEP_SUMMARY
          echo "| Integration Tests | ${{ needs.test.result == 'success' && '✅ PASSED' || '❌ FAILED' }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Security Scan | ${{ needs.security-scan.result == 'success' && '✅ PASSED' || '❌ FAILED' }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Integration Validation | ${{ needs.integration-validation.result == 'success' && '✅ PASSED' || '❌ FAILED' }} |" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY

          if [ "${{ needs.test.result }}" = "success" ] && [ "${{ needs.security-scan.result }}" = "success" ] && [ "${{ needs.integration-validation.result }}" = "success" ]; then
            echo "🎉 **All tests passed!** Integration is ready for release." >> $GITHUB_STEP_SUMMARY
          else
            echo "⚠️ **Some tests failed.** Please review the results above." >> $GITHUB_STEP_SUMMARY
          fi
